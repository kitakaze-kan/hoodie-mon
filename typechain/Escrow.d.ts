/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EscrowInterface extends ethers.utils.Interface {
  functions: {
    "AgentLedger(address,uint256)": FunctionFragment;
    "BuyerLedger(address,uint256)": FunctionFragment;
    "Funds(address)": FunctionFragment;
    "SellerLedger(address,uint256)": FunctionFragment;
    "TransactionLedger(uint256)": FunctionFragment;
    "agentFee()": FunctionFragment;
    "createEscrow(address,address,string,uint256)": FunctionFragment;
    "getAgentLedgerLength(address)": FunctionFragment;
    "getBuyerLedger(address)": FunctionFragment;
    "getSellerLedger(address)": FunctionFragment;
    "getTransaction(uint256)": FunctionFragment;
    "getTransactionLength()": FunctionFragment;
    "getbuyerLedgerLength(address)": FunctionFragment;
    "getsellerLedgerLength(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "raiseDispute(uint256)": FunctionFragment;
    "refundBuyer(uint256)": FunctionFragment;
    "releaseFunds(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEscrowFee(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AgentLedger",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "BuyerLedger",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "Funds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "SellerLedger",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TransactionLedger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "agentFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentLedgerLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerLedger",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerLedger",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getbuyerLedgerLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getsellerLedgerLength",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundBuyer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEscrowFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AgentLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BuyerLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Funds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SellerLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TransactionLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agentFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentLedgerLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getbuyerLedgerLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getsellerLedgerLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEscrowFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EscrowIssued(address,address,address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentCompletion(address,address,address,uint256,uint256,uint8)": EventFragment;
    "PaymentCreation(address,address,address,uint256,uint256)": EventFragment;
    "PaymentDispute(address,address,address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscrowIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentCompletion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentCreation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentDispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type EscrowIssuedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber] & {
    buyer: string;
    seller: string;
    agent: string;
    id: BigNumber;
    value: BigNumber;
    issueDate: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PaymentCompletionEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, number] & {
    buyer: string;
    seller: string;
    agent: string;
    id: BigNumber;
    value: BigNumber;
    status: number;
  }
>;

export type PaymentCreationEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    buyer: string;
    seller: string;
    agent: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type PaymentDisputeEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    buyer: string;
    seller: string;
    agent: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber] & { user: string; value: BigNumber }
>;

export class Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EscrowInterface;

  functions: {
    AgentLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    BuyerLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    Funds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    SellerLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    TransactionLedger(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        BigNumber,
        BigNumber
      ] & {
        buyer: string;
        seller: string;
        agent: string;
        value: BigNumber;
        escrowFee: BigNumber;
        status: number;
        link: string;
        issueDate: BigNumber;
        dueDate: BigNumber;
      }
    >;

    agentFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    createEscrow(
      _seller: string,
      _agent: string,
      _link: string,
      _dueDate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAgentLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyerLedger(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSellerLedger(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTransaction(
      txid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          string,
          BigNumber,
          BigNumber
        ] & {
          buyer: string;
          seller: string;
          agent: string;
          value: BigNumber;
          escrowFee: BigNumber;
          status: number;
          link: string;
          issueDate: BigNumber;
          dueDate: BigNumber;
        }
      ] & {
        transaction: [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          number,
          string,
          BigNumber,
          BigNumber
        ] & {
          buyer: string;
          seller: string;
          agent: string;
          value: BigNumber;
          escrowFee: BigNumber;
          status: number;
          link: string;
          issueDate: BigNumber;
          dueDate: BigNumber;
        };
      }
    >;

    getTransactionLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getbuyerLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getsellerLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    raiseDispute(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refundBuyer(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseFunds(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEscrowFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AgentLedger(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  BuyerLedger(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  Funds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  SellerLedger(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  TransactionLedger(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      string,
      BigNumber,
      BigNumber
    ] & {
      buyer: string;
      seller: string;
      agent: string;
      value: BigNumber;
      escrowFee: BigNumber;
      status: number;
      link: string;
      issueDate: BigNumber;
      dueDate: BigNumber;
    }
  >;

  agentFee(overrides?: CallOverrides): Promise<BigNumber>;

  createEscrow(
    _seller: string,
    _agent: string,
    _link: string,
    _dueDate: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAgentLedgerLength(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyerLedger(user: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  getSellerLedger(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTransaction(
    txid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      string,
      BigNumber,
      BigNumber
    ] & {
      buyer: string;
      seller: string;
      agent: string;
      value: BigNumber;
      escrowFee: BigNumber;
      status: number;
      link: string;
      issueDate: BigNumber;
      dueDate: BigNumber;
    }
  >;

  getTransactionLength(overrides?: CallOverrides): Promise<BigNumber>;

  getbuyerLedgerLength(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getsellerLedgerLength(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  raiseDispute(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refundBuyer(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseFunds(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEscrowFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AgentLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BuyerLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Funds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    SellerLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TransactionLedger(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        BigNumber,
        BigNumber
      ] & {
        buyer: string;
        seller: string;
        agent: string;
        value: BigNumber;
        escrowFee: BigNumber;
        status: number;
        link: string;
        issueDate: BigNumber;
        dueDate: BigNumber;
      }
    >;

    agentFee(overrides?: CallOverrides): Promise<BigNumber>;

    createEscrow(
      _seller: string,
      _agent: string,
      _link: string,
      _dueDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAgentLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyerLedger(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSellerLedger(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTransaction(
      txid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        BigNumber,
        BigNumber
      ] & {
        buyer: string;
        seller: string;
        agent: string;
        value: BigNumber;
        escrowFee: BigNumber;
        status: number;
        link: string;
        issueDate: BigNumber;
        dueDate: BigNumber;
      }
    >;

    getTransactionLength(overrides?: CallOverrides): Promise<BigNumber>;

    getbuyerLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getsellerLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    raiseDispute(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    refundBuyer(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    releaseFunds(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEscrowFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EscrowIssued(address,address,address,uint256,uint256,uint256)"(
      buyer?: string | null,
      seller?: string | null,
      agent?: string | null,
      id?: null,
      value?: null,
      issueDate?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        seller: string;
        agent: string;
        id: BigNumber;
        value: BigNumber;
        issueDate: BigNumber;
      }
    >;

    EscrowIssued(
      buyer?: string | null,
      seller?: string | null,
      agent?: string | null,
      id?: null,
      value?: null,
      issueDate?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        seller: string;
        agent: string;
        id: BigNumber;
        value: BigNumber;
        issueDate: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PaymentCompletion(address,address,address,uint256,uint256,uint8)"(
      buyer?: string | null,
      seller?: string | null,
      agent?: string | null,
      id?: null,
      value?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, number],
      {
        buyer: string;
        seller: string;
        agent: string;
        id: BigNumber;
        value: BigNumber;
        status: number;
      }
    >;

    PaymentCompletion(
      buyer?: string | null,
      seller?: string | null,
      agent?: string | null,
      id?: null,
      value?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, number],
      {
        buyer: string;
        seller: string;
        agent: string;
        id: BigNumber;
        value: BigNumber;
        status: number;
      }
    >;

    "PaymentCreation(address,address,address,uint256,uint256)"(
      buyer?: string | null,
      seller?: string | null,
      agent?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        buyer: string;
        seller: string;
        agent: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    PaymentCreation(
      buyer?: string | null,
      seller?: string | null,
      agent?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        buyer: string;
        seller: string;
        agent: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    "PaymentDispute(address,address,address,uint256,uint256)"(
      buyer?: string | null,
      seller?: string | null,
      agent?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        buyer: string;
        seller: string;
        agent: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    PaymentDispute(
      buyer?: string | null,
      seller?: string | null,
      agent?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        buyer: string;
        seller: string;
        agent: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    "Withdraw(address,uint256)"(
      user?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; value: BigNumber }
    >;

    Withdraw(
      user?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; value: BigNumber }
    >;
  };

  estimateGas: {
    AgentLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BuyerLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Funds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    SellerLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TransactionLedger(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    agentFee(overrides?: CallOverrides): Promise<BigNumber>;

    createEscrow(
      _seller: string,
      _agent: string,
      _link: string,
      _dueDate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAgentLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyerLedger(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSellerLedger(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransaction(
      txid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionLength(overrides?: CallOverrides): Promise<BigNumber>;

    getbuyerLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getsellerLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    raiseDispute(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refundBuyer(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseFunds(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEscrowFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AgentLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BuyerLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Funds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SellerLedger(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TransactionLedger(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    agentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createEscrow(
      _seller: string,
      _agent: string,
      _link: string,
      _dueDate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAgentLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyerLedger(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerLedger(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransaction(
      txid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getbuyerLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getsellerLedgerLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raiseDispute(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refundBuyer(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseFunds(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEscrowFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
