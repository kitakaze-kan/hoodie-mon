/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Dex, DexInterface } from "../Dex";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOfETH",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOfToken",
        type: "uint256",
      },
    ],
    name: "Bought",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOfETH",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOfToken",
        type: "uint256",
      },
    ],
    name: "Sold",
    type: "event",
  },
  {
    inputs: [],
    name: "buyToken",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenAmountToSell",
        type: "uint256",
      },
    ],
    name: "sellTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokensAmount",
        type: "uint256",
      },
    ],
    name: "setTokensPerEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260646002553480156200001657600080fd5b50604051620017823803806200178283398181016040528101906200003c919062000187565b6200005c62000050620000a460201b60201c565b620000ac60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000201565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200018181620001e7565b92915050565b6000602082840312156200019a57600080fd5b6000620001aa8482850162000170565b91505092915050565b6000620001c082620001c7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001f281620001b3565b8114620001fe57600080fd5b50565b61157180620002116000396000f3fe6080604052600436106100705760003560e01c8063715018a61161004e578063715018a6146100de5780638da5cb5b146100f5578063a482171914610120578063f2fde38b1461013e57610070565b80633ccfd60b1461007557806356238b021461008c5780636c11bcd3146100b5575b600080fd5b34801561008157600080fd5b5061008a610167565b005b34801561009857600080fd5b506100b360048036038101906100ae9190610bf1565b6102db565b005b3480156100c157600080fd5b506100dc60048036038101906100d79190610bf1565b6102e5565b005b3480156100ea57600080fd5b506100f3610657565b005b34801561010157600080fd5b5061010a6106df565b6040516101179190610e3d565b60405180910390f35b610128610708565b604051610135919061106f565b60405180910390f35b34801561014a57600080fd5b5061016560048036038101906101609190610b9f565b610987565b005b61016f610a7f565b73ffffffffffffffffffffffffffffffffffffffff1661018d6106df565b73ffffffffffffffffffffffffffffffffffffffff16146101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da90610fcf565b60405180910390fd5b60004790506000811161022b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102229061100f565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161025190610e28565b60006040518083038185875af1925050503d806000811461028e576040519150601f19603f3d011682016040523d82523d6000602084013e610293565b606091505b50509050806102d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ce90610fef565b60405180910390fd5b5050565b8060028190555050565b60008111610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f90610faf565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103859190610e3d565b60206040518083038186803b15801561039d57600080fd5b505afa1580156103b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d59190610c1a565b90508181101561041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041190610f4f565b60405180910390fd5b60006002548361042a91906110a6565b9050600047905081811015610474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046b90610eef565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b81526004016104d593929190610e58565b602060405180830381600087803b1580156104ef57600080fd5b505af1158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105279190610bc8565b905080610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056090610f6f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168360405161058d90610e28565b60006040518083038185875af1925050503d80600081146105ca576040519150601f19603f3d011682016040523d82523d6000602084013e6105cf565b606091505b50508091505080610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c9061102f565b60405180910390fd5b7fbac9694ac0daa55169abd117086fe32c89401d9a3b15dd1d34e55e0aa4e47a9d33848760405161064893929190610eb8565b60405180910390a15050505050565b61065f610a7f565b73ffffffffffffffffffffffffffffffffffffffff1661067d6106df565b73ffffffffffffffffffffffffffffffffffffffff16146106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca90610fcf565b60405180910390fd5b6106dd6000610a87565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080341161074c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074390610f2f565b60405180910390fd5b60006002543461075c91906110d7565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107bb9190610e3d565b60206040518083038186803b1580156107d357600080fd5b505afa1580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b9190610c1a565b905081811015610850576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084790610f8f565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b81526004016108af929190610e8f565b602060405180830381600087803b1580156108c957600080fd5b505af11580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109019190610bc8565b905080610943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093a9061104f565b60405180910390fd5b7fa9a40dec7a304e5915d11358b968c1e8d365992abf20f82285d1df1b30c8e24c33348560405161097693929190610eb8565b60405180910390a182935050505090565b61098f610a7f565b73ffffffffffffffffffffffffffffffffffffffff166109ad6106df565b73ffffffffffffffffffffffffffffffffffffffff1614610a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa90610fcf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6a90610f0f565b60405180910390fd5b610a7c81610a87565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081359050610b5a816114f6565b92915050565b600081519050610b6f8161150d565b92915050565b600081359050610b8481611524565b92915050565b600081519050610b9981611524565b92915050565b600060208284031215610bb157600080fd5b6000610bbf84828501610b4b565b91505092915050565b600060208284031215610bda57600080fd5b6000610be884828501610b60565b91505092915050565b600060208284031215610c0357600080fd5b6000610c1184828501610b75565b91505092915050565b600060208284031215610c2c57600080fd5b6000610c3a84828501610b8a565b91505092915050565b610c4c81611131565b82525050565b6000610c5f603683611095565b9150610c6a826111d7565b604082019050919050565b6000610c82602683611095565b9150610c8d82611226565b604082019050919050565b6000610ca5601b83611095565b9150610cb082611275565b602082019050919050565b6000610cc8604083611095565b9150610cd38261129e565b604082019050919050565b6000610ceb602d83611095565b9150610cf6826112ed565b604082019050919050565b6000610d0e603483611095565b9150610d198261133c565b604082019050919050565b6000610d31602c83611095565b9150610d3c8261138b565b604082019050919050565b6000610d54602083611095565b9150610d5f826113da565b602082019050919050565b6000610d77602d83611095565b9150610d8282611403565b604082019050919050565b6000610d9a60008361108a565b9150610da582611452565b600082019050919050565b6000610dbd602183611095565b9150610dc882611455565b604082019050919050565b6000610de0601e83611095565b9150610deb826114a4565b602082019050919050565b6000610e03602083611095565b9150610e0e826114cd565b602082019050919050565b610e228161116f565b82525050565b6000610e3382610d8d565b9150819050919050565b6000602082019050610e526000830184610c43565b92915050565b6000606082019050610e6d6000830186610c43565b610e7a6020830185610c43565b610e876040830184610e19565b949350505050565b6000604082019050610ea46000830185610c43565b610eb16020830184610e19565b9392505050565b6000606082019050610ecd6000830186610c43565b610eda6020830185610e19565b610ee76040830184610e19565b949350505050565b60006020820190508181036000830152610f0881610c52565b9050919050565b60006020820190508181036000830152610f2881610c75565b9050919050565b60006020820190508181036000830152610f4881610c98565b9050919050565b60006020820190508181036000830152610f6881610cbb565b9050919050565b60006020820190508181036000830152610f8881610cde565b9050919050565b60006020820190508181036000830152610fa881610d01565b9050919050565b60006020820190508181036000830152610fc881610d24565b9050919050565b60006020820190508181036000830152610fe881610d47565b9050919050565b6000602082019050818103600083015261100881610d6a565b9050919050565b6000602082019050818103600083015261102881610db0565b9050919050565b6000602082019050818103600083015261104881610dd3565b9050919050565b6000602082019050818103600083015261106881610df6565b9050919050565b60006020820190506110846000830184610e19565b92915050565b600081905092915050565b600082825260208201905092915050565b60006110b18261116f565b91506110bc8361116f565b9250826110cc576110cb6111a8565b5b828204905092915050565b60006110e28261116f565b91506110ed8361116f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561112657611125611179565b5b828202905092915050565b600061113c8261114f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f56656e646f7220686173206e6f7420656e6f7567682066756e647320746f206160008201527f6363657074207468652073656c6c207265717565737400000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f53656e642045544820746f2062757920736f6d6520746f6b656e730000000000600082015250565b7f596f75722062616c616e6365206973206c6f776572207468616e20746865206160008201527f6d6f756e74206f6620746f6b656e7320796f752077616e7420746f2073656c6c602082015250565b7f4661696c656420746f207472616e7366657220746f6b656e732066726f6d207560008201527f73657220746f2076656e646f7200000000000000000000000000000000000000602082015250565b7f56656e646f7220636f6e747261637420686173206e6f7420656e6f756768207460008201527f6f6b656e7320696e206974732062616c616e6365000000000000000000000000602082015250565b7f5370656369667920616e20616d6f756e74206f6620746f6b656e20677265617460008201527f6572207468616e207a65726f0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4661696c656420746f2073656e6420757365722062616c616e6365206261636b60008201527f20746f20746865206f776e657200000000000000000000000000000000000000602082015250565b50565b7f4f776e657220686173206e6f742062616c616e636520746f207769746864726160008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f2073656e642045544820746f2074686520757365720000600082015250565b7f4661696c656420746f207472616e7366657220746f6b656e20746f2075736572600082015250565b6114ff81611131565b811461150a57600080fd5b50565b61151681611143565b811461152157600080fd5b50565b61152d8161116f565b811461153857600080fd5b5056fea2646970667358221220535b5923a2615cd850f988ce208fb1c2f0380817d0b96d59175128314ed2b4a164736f6c63430008040033";

export class Dex__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Dex> {
    return super.deploy(tokenAddress, overrides || {}) as Promise<Dex>;
  }
  getDeployTransaction(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenAddress, overrides || {});
  }
  attach(address: string): Dex {
    return super.attach(address) as Dex;
  }
  connect(signer: Signer): Dex__factory {
    return super.connect(signer) as Dex__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexInterface {
    return new utils.Interface(_abi) as DexInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Dex {
    return new Contract(address, _abi, signerOrProvider) as Dex;
  }
}
